apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: "org.sonarqube"

dependencies {
    // ALL
    implementation project(':commons-android')
    implementation rootProject.ext.supportLibs.appCompat
    implementation rootProject.ext.supportLibs.design
    implementation rootProject.ext.gpsLibs.analytics
    implementation rootProject.ext.gpsLibs.location
    implementation rootProject.ext.gpsLibs.maps
    implementation rootProject.ext.gpsLibs.firebase_ads
    implementation rootProject.ext.gpsLibs.firebase_analytics
    implementation rootProject.ext.gpsLibs.firebase_crash
    implementation rootProject.ext.fbLibs.audienceNetwork
    implementation rootProject.ext.fbLibs.audienceNetworkMediation
    // DEBUG
    debugImplementation rootProject.ext.squareLibs.leakcanary
    // RELEASE
    releaseImplementation rootProject.ext.squareLibs.leakcanary_no_op
    // TEST
    testImplementation rootProject.ext.squareLibs.leakcanary_no_op
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    Properties projectNameProperties = new Properties()
    projectNameProperties.load(new FileInputStream(file("project_name.properties")))

    def projectName = projectNameProperties["project.name"]

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("version.properties")))

    Properties keysProperties = new Properties()
    def keysPropertiesFile = file("../keys.properties")
    if (keysPropertiesFile.exists()) {
        keysProperties.load(new FileInputStream(keysPropertiesFile))
    }

    defaultConfig {
        versionCode versionProperties['version.code'] as Integer
        versionName versionProperties['version.name']
        setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}")
        resConfigs "en", "fr"
        // minSdkVersion 23 // DEBUG
        // //noinspection OldTargetApi // DEBUG
        // targetSdkVersion 22 // DEBUG
        // maxSdkVersion 23 // DEBUG
    }

    signingConfigs {
        release {
            if (keysPropertiesFile.exists()) {
                storeFile file(keysProperties['key.store'])
                storePassword keysProperties['key.store.password']
                keyAlias keysProperties['key.alias']
                keyPassword keysProperties['key.alias.password']
            }
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "_DEBUG"

            shrinkResources false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        //noinspection GroovyMissingReturnStatement
        release {
            if (keysPropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }

            shrinkResources true
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    //noinspection GroovyMissingReturnStatement
    lintOptions {
        abortOnError true
        // abortOnError false // DEBUG
        ignoreWarnings false
        // ignoreWarnings true // DEBUG
        quiet false
        // quiet  true // DEBUG
        warning 'InvalidPackage', //
                'ClickableViewAccessibility', //
                'MergeRootFrame', //
                'Overdraw', //
                'UselessParent', //
                'IconDensities',  //
                'RtlHardcoded'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    def publish = project.tasks.create("copyReleaseApkToOutputDirs")
    publish.description "Copies release APK to output directory"
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            Properties customLocalProperties = new Properties()
            def customLocalPropertiesFile = file("../keys.properties")
            if (customLocalPropertiesFile.exists()) {
                customLocalProperties.load(new FileInputStream(file("../custom_local.properties")))
                def outputDir = customLocalProperties['output.dir']
                def outputCloudDir = customLocalProperties['output.cloud.dir']
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                        def copyToOutputDirTask = project.tasks.create("copyToOutputDir${variant.name}Apk", Copy)
                        def copyToOutputCloudDirTask = project.tasks.create("copyToOutputCloudDir${variant.name}Apk", Copy)
                        copyToOutputDirTask.from(output.outputFile)
                        copyToOutputCloudDirTask.from(output.outputFile)
                        copyToOutputDirTask.into(outputDir)
                        copyToOutputCloudDirTask.into(outputCloudDir)
                        copyToOutputDirTask.dependsOn variant.assemble
                        copyToOutputCloudDirTask.dependsOn variant.assemble
                        publish.dependsOn copyToOutputDirTask
                        publish.dependsOn copyToOutputCloudDirTask
                    }
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
